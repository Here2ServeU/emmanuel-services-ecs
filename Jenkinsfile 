pipeline {
    agent any

    environment {
        AWS_REGION           = credentials('AWS_REGION')
        ECR_REPO_FLASK       = credentials('ECR_REPO_FLASK')
        ECR_REPO_NODE        = credentials('ECR_REPO_NODE')
        FRONTEND_IMAGE       = "${ECR_REPO_NODE}:latest"
        BACKEND_IMAGE        = "${ECR_REPO_FLASK}:latest"
        REPO_URL             = credentials('GIT_REPO_URL')
        ALB_FRONTEND_URL     = credentials('ALB_FRONTEND_URL')
        ALB_BACKEND_URL      = credentials('ALB_BACKEND_URL')
        S3_BUCKET            = credentials('S3_BUCKET')
        DYNAMODB_TABLE       = credentials('DYNAMODB_TABLE')
        AWS_ACCESS_KEY_ID    = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    triggers {
        pollSCM('H/5 * * * *') // Poll GitHub every 5 minutes for changes
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    // Authenticate with ECR
                    sh """
                        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                        aws configure set region ${AWS_REGION}

                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_FLASK}
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_NODE}
                    """

                    // Build Docker images
                    sh """
                        docker build -t ${FRONTEND_IMAGE} ./docker/frontend
                        docker build -t ${BACKEND_IMAGE} ./docker/backend
                    """

                    // Push Docker images
                    sh """
                        docker push ${FRONTEND_IMAGE}
                        docker push ${BACKEND_IMAGE}
                    """
                }
            }
        }

        stage('Deploy to ECS with Terraform') {
            steps {
                script {
                    sh """
                        terraform init -backend-config="bucket=${S3_BUCKET}" \
                                       -backend-config="dynamodb_table=${DYNAMODB_TABLE}" \
                                       -backend-config="region=${AWS_REGION}"
                        terraform apply -auto-approve
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    def frontendStatus = sh(script: "curl -o /dev/null -s -w '%{http_code}' ${ALB_FRONTEND_URL}", returnStdout: true).trim()
                    def backendStatus = sh(script: "curl -o /dev/null -s -w '%{http_code}' ${ALB_BACKEND_URL}", returnStdout: true).trim()

                    if (frontendStatus != '200' || backendStatus != '200') {
                        error("Deployment verification failed: Frontend (${frontendStatus}), Backend (${backendStatus})")
                    } else {
                        echo "Node frontend and Flask backend services are up and running successfully!"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed. Please check logs for details."
        }
    }
}