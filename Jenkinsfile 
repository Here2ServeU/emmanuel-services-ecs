pipeline {
    agent any

    environment {
        AWS_REGION = credentials('aws-region')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        ECR_REPO_NODE = credentials('ecr-repo-node')
        ECR_REPO_FLASK = credentials('ecr-repo-flask')
        REPO_URL = credentials('github-repo-url')
        S3_BUCKET = credentials('s3-bucket-name')
        DYNAMODB_TABLE = credentials('dynamodb-table')
        ALB_FRONTEND_URL = credentials('alb-frontend-url')
        ALB_BACKEND_URL = credentials('alb-backend-url')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git url: "${REPO_URL}", branch: 'main'
            }
        }

        stage('Build & Push Docker Images') {
            steps {
                script {
                    withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
                        sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set region $AWS_REGION

                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_NODE
                            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_FLASK

                            docker build -t $ECR_REPO_NODE:latest ./docker/frontend
                            docker build -t $ECR_REPO_FLASK:latest ./docker/backend

                            docker push $ECR_REPO_NODE:latest
                            docker push $ECR_REPO_FLASK:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to ECS using AWS CLI') {
            steps {
                script {
                    def CLUSTER_NAME = 'emmanuel-app-cluster'
                    def SERVICE_NAME = 'node-frontend-service'
                    def TASK_DEFINITION_FILE = 'node-frontend-task.json'

                    sh """
                        CLUSTER_EXISTS=\$(aws ecs describe-clusters --clusters ${CLUSTER_NAME} --region ${AWS_REGION} --query "clusters[?status=='ACTIVE'].clusterName" --output text)
                        if [ "\$CLUSTER_EXISTS" != "${CLUSTER_NAME}" ]; then
                            echo "ERROR: ECS Cluster '${CLUSTER_NAME}' not found in region '${AWS_REGION}'"
                            exit 1
                        fi

                        TASK_DEF_ARN=\$(aws ecs register-task-definition --cli-input-json file://${TASK_DEFINITION_FILE} --region ${AWS_REGION} --query taskDefinition.taskDefinitionArn --output text)
                        echo "New Task Definition ARN: \$TASK_DEF_ARN"

                        aws ecs update-service --cluster ${CLUSTER_NAME} --service ${SERVICE_NAME} --task-definition \$TASK_DEF_ARN --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    echo "üîç ALB_FRONTEND_URL: ${ALB_FRONTEND_URL}"
                    echo "üîç ALB_BACKEND_URL: ${ALB_BACKEND_URL}"

                    def frontendStatus = sh(script: "curl -o /dev/null -s -w '%{http_code}' ${ALB_FRONTEND_URL}", returnStdout: true).trim()
                    def backendStatus  = sh(script: "curl -o /dev/null -s -w '%{http_code}' ${ALB_BACKEND_URL}", returnStdout: true).trim()

                    if (frontendStatus != '200' || backendStatus != '200') {
                        error("Deployment verification failed: Frontend (${frontendStatus}), Backend (${backendStatus})")
                    } else {
                        echo "Node frontend and Flask backend are healthy! (Frontend: ${frontendStatus}, Backend: ${backendStatus})"
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'Deployment failed. Please check logs for details. ‚ùå'
        }
        success {
            echo 'üéâ Deployment completed successfully!'
        }
    }
}